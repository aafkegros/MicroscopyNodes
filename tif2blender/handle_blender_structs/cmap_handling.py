import bpy
from mathutils import Color

def set_color_ramp(ramp_node, lut, name):
    for ix, color in enumerate(lut['cmap']):
        if len(ramp_node.color_ramp.elements) <= ix:
            ramp_node.color_ramp.elements.new(ix/(len(lut['cmap'])-lut['linear']))
        ramp_node.color_ramp.elements[ix].position = ix/(len(lut['cmap'])-lut['linear'])
        ramp_node.color_ramp.elements[ix].color = (color[0],color[1],color[2],color[3])
    if not lut['linear']:
        ramp_node.color_ramp.interpolation = "CONSTANT"
    ramp_node.label = name
    return

def get_cmap(name, maxval=32, ramp=None):
    if ramp is None:
        return luts(maxval)[name]['cmap']
    return set_color_ramp(ramp,  luts(maxval)[name], name)

def luts(maxval=32):
    luts = {}
    maxval = min(maxval, 32) # max numbers on color ramp
    luts['mpl-viridis'] = {
        #    plt.get_cmap('viridis',32).colors # To regenerate
        "cmap": [[0.267004, 0.004874, 0.329415, 1.      ],
        [0.277018, 0.050344, 0.375715, 1.      ],
        [0.282327, 0.094955, 0.417331, 1.      ],
        [0.282884, 0.13592 , 0.453427, 1.      ],
        [0.278012, 0.180367, 0.486697, 1.      ],
        [0.269308, 0.218818, 0.509577, 1.      ],
        [0.257322, 0.25613 , 0.526563, 1.      ],
        [0.243113, 0.292092, 0.538516, 1.      ],
        [0.225863, 0.330805, 0.547314, 1.      ],
        [0.210503, 0.363727, 0.552206, 1.      ],
        [0.19586 , 0.395433, 0.555276, 1.      ],
        [0.182256, 0.426184, 0.55712 , 1.      ],
        [0.168126, 0.459988, 0.558082, 1.      ],
        [0.15627 , 0.489624, 0.557936, 1.      ],
        [0.144759, 0.519093, 0.556572, 1.      ],
        [0.133743, 0.548535, 0.553541, 1.      ],
        [0.123463, 0.581687, 0.547445, 1.      ],
        [0.119423, 0.611141, 0.538982, 1.      ],
        [0.12478 , 0.640461, 0.527068, 1.      ],
        [0.143303, 0.669459, 0.511215, 1.      ],
        [0.180653, 0.701402, 0.488189, 1.      ],
        [0.226397, 0.728888, 0.462789, 1.      ],
        [0.281477, 0.755203, 0.432552, 1.      ],
        [0.344074, 0.780029, 0.397381, 1.      ],
        [0.421908, 0.805774, 0.35191 , 1.      ],
        [0.496615, 0.826376, 0.306377, 1.      ],
        [0.575563, 0.844566, 0.256415, 1.      ],
        [0.657642, 0.860219, 0.203082, 1.      ],
        [0.751884, 0.874951, 0.143228, 1.      ],
        [0.83527 , 0.886029, 0.102646, 1.      ],
        [0.916242, 0.896091, 0.100717, 1.      ],
        [0.993248, 0.906157, 0.143936, 1.      ]],
        'linear':True
        }
    luts['mpl-tab10'] = {
        "cmap":((0.12156862745098039, 0.4666666666666667, 0.7058823529411765, 1), 
        (1.0, 0.4980392156862745, 0.054901960784313725, 1), 
        (0.17254901960784313, 0.6274509803921569, 0.17254901960784313, 1), 
        (0.8392156862745098, 0.15294117647058825, 0.1568627450980392, 1), 
        (0.5803921568627451, 0.403921568627451, 0.7411764705882353, 1), 
        (0.5490196078431373, 0.33725490196078434, 0.29411764705882354, 1), 
        (0.8901960784313725, 0.4666666666666667, 0.7607843137254902, 1), 
        (0.4980392156862745, 0.4980392156862745, 0.4980392156862745, 1), 
        (0.7372549019607844, 0.7411764705882353, 0.13333333333333333, 1), 
        (0.09019607843137255, 0.7450980392156863, 0.8117647058823529, 1)),
        'linear' :False
    }
    luts['hue-wheel'] = {
        'cmap': channels_default(maxval),
        'linear' : False
    }
    return luts

def channels_default(maxval):
    if maxval == 1:
        return [[1,1,1,1]]
    cmap = []
    for i in range(maxval):
        c = Color()
        c.hsv = (i/maxval + 1/6) % 1, 1, 1
        cmap.append([c.r, c.g, c.b, 1.0])
    return cmap